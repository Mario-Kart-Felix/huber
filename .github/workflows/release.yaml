name: Release

on:
  workflow_dispatch:
    inputs:
  push:
    tags:
      - 'v*'

jobs:
  release-linux-x86_64:
    name: Release for linux x86_64
    runs-on: ubuntu-latest
    needs: [ ]
    steps:
      - name: Checkout code
        id: checkout-code
        uses: actions/checkout@v2

      - name: Setup build environment
        run: make setup-dev

      - name: Build all artifacts
        run: make release

      - name: Create changelog
        id: changelog
        uses: innobead/github-release-notes-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create release and upload artifacts
        id: upload-release-asset
        run: |
          set -x

          assets=()

          while IFS= read -r -d '' f; do
            if [[ -f "$f" ]]; then
              assets+=("-a" "./$f")
            fi
          done < <(find ./.target -print0)

          tag_name="${GITHUB_REF##*/}"
          hub release edit -d "${assets[@]}" -m "" "$tag_name"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CHANGELOG: ${{ steps.changelog.outputs.changelog }}

  release-linux-aarch64:
    name: Rlease for Linux AArch64
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
        with:
          version: latest

      - name: Available platforms
        run: echo ${{ steps.buildx.outputs.platforms }}

      - name: Setup, Test, Build
        run: make release-multiarch

      - name: Create release and upload artifacts
        id: upload-release-asset
        run: |
          set -x

          assets=()

          while IFS= read -r -d '' f; do
            if [[ -f "$f" ]]; then
              assets+=("-a" "./$f")
            fi
          done < <(find ./.target -print0)

          tag_name="${GITHUB_REF##*/}"
          tag_name="$(hub release -d | head -n 1 | tr -d '\n')"
          hub release edit -d "${assets[@]}" -m "" "$tag_name"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

#  release-linux-armv7:
#    name: Rlease for Linux ARMv7
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v2
#
#      - name: Set up QEMU
#        uses: docker/setup-qemu-action@v1
#
#      - name: Set up Docker Buildx
#        id: buildx
#        uses: docker/setup-buildx-action@v1
#        with:
#          version: latest
#
#      - name: Available platforms
#        run: echo ${{ steps.buildx.outputs.platforms }}
#
#      - name: Setup, Test, Build
#        run: PLATFORMS=linux/arm/v7 make release-multiarch
#
#      - name: Create release and upload artifacts
#        id: upload-release-asset
#        run: |
#          set -x
#
#          assets=()
#
#          while IFS= read -r -d '' f; do
#            if [[ -f "$f" ]]; then
#              assets+=("-a" "./$f")
#            fi
#          done < <(find ./.target -print0)
#
#          tag_name="${GITHUB_REF##*/}"
#          tag_name="$(hub release -d | head -n 1 | tr -d '\n')"
#          hub release edit -d "${assets[@]}" -m "" "$tag_name"
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  release-macos:
    name: Release for MacOS
    needs: release-linux-x86_64
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup build environment
        run: make setup-dev

      - name: Build all artifacts
        run: source ~/.bashrc && make release

      - name: Create release and upload artifacts
        id: upload-release-asset
        run: |
          set -x

          assets=()

          while IFS= read -r -d '' f; do
            if [[ -f "$f" ]]; then
              assets+=("-a" "./$f")
            fi
          done < <(find ./.target -print0)

          tag_name="${GITHUB_REF##*/}"
          tag_name="$(hub release -d | head -n 1 | tr -d '\n')"
          hub release edit -d "${assets[@]}" -m "" "$tag_name"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  release-windows:
    name: Release for Windows
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      # Need to use this github action plugin to build vcpkg instead of using the one builtin in github action infra.
      # It will cause the following vcpkg packages build failed
      # Ref: https://github.com/OSSystems/compress-tools-rs/blob/master/.github/workflows/windows.yml#L28
      - name: Install vcpkg
        uses: lukka/run-vcpkg@v7
        with:
          setupOnly: true
          vcpkgGitCommitId: ec6fe06e8da05a8157dc8581fa96b36b571c1bd5 # 2020.11-1

      - name: Setup build environment
        run: ./hack/windows/setup-dev.ps1

      - name: Build all artifacts
        run: ./hack/windows/release.ps1

      - name: Create release and upload artifacts
        id: upload-release-asset
        run: ./hack/windows/upload-release-asset.ps1 ./target/release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
